commit 8b42fc47e1b64cb661fed8d96f874effbdf1d7f1
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Thu Mar 17 14:20:25 2016 -0700

    mm: memcontrol: reclaim when shrinking memory.high below usage
    
    commit 588083bb37a3cea8533c392370a554417c8f29cb upstream.
    
    When setting memory.high below usage, nothing happens until the next
    charge comes along, and then it will only reclaim its own charge and not
    the now potentially huge excess of the new memory.high.  This can cause
    groups to stay in excess of their memory.high indefinitely.
    
    To fix that, when shrinking memory.high, kick off a reclaim cycle that
    goes after the delta.
    
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Vladimir Davydov <vdavydov@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/mm/memcontrol.c b/mm/memcontrol.c
index ee6acd2..5d081ff 100644
--- a/mm/memcontrol.c
+++ b/mm/memcontrol.c
@@ -5121,6 +5121,7 @@ static ssize_t memory_high_write(struct kernfs_open_file *of,
 				 char *buf, size_t nbytes, loff_t off)
 {
 	struct mem_cgroup *memcg = mem_cgroup_from_css(of_css(of));
+	unsigned long nr_pages;
 	unsigned long high;
 	int err;
 
@@ -5131,6 +5132,11 @@ static ssize_t memory_high_write(struct kernfs_open_file *of,
 
 	memcg->high = high;
 
+	nr_pages = page_counter_read(&memcg->memory);
+	if (nr_pages > high)
+		try_to_free_mem_cgroup_pages(memcg, nr_pages - high,
+					     GFP_KERNEL, true);
+
 	memcg_wb_domain_size_changed(memcg);
 	return nbytes;
 }
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1363_8b42fc47e1b64cb661fed8d96f874effbdf1d7f1.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1363_8b42fc47e1b64cb661fed8d96f874effbdf1d7f1.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
