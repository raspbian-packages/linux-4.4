commit 5f4a82d5e3492c26fb0263ca7f007180612e8b54
Author: Joshua Hunt <johunt@akamai.com>
Date:   Thu Mar 17 14:17:23 2016 -0700

    watchdog: don't run proc_watchdog_update if new value is same as old
    
    commit a1ee1932aa6bea0bb074f5e3ced112664e4637ed upstream.
    
    While working on a script to restore all sysctl params before a series of
    tests I found that writing any value into the
    /proc/sys/kernel/{nmi_watchdog,soft_watchdog,watchdog,watchdog_thresh}
    causes them to call proc_watchdog_update().
    
      NMI watchdog: enabled on all CPUs, permanently consumes one hw-PMU counter.
      NMI watchdog: enabled on all CPUs, permanently consumes one hw-PMU counter.
      NMI watchdog: enabled on all CPUs, permanently consumes one hw-PMU counter.
      NMI watchdog: enabled on all CPUs, permanently consumes one hw-PMU counter.
    
    There doesn't appear to be a reason for doing this work every time a write
    occurs, so only do it when the values change.
    
    Signed-off-by: Josh Hunt <johunt@akamai.com>
    Acked-by: Don Zickus <dzickus@redhat.com>
    Reviewed-by: Aaron Tomlin <atomlin@redhat.com>
    Cc: Ulrich Obergfell <uobergfe@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/kernel/watchdog.c b/kernel/watchdog.c
index 18f34cf..198137b 100644
--- a/kernel/watchdog.c
+++ b/kernel/watchdog.c
@@ -907,6 +907,9 @@ static int proc_watchdog_common(int which, struct ctl_table *table, int write,
 		 * both lockup detectors are disabled if proc_watchdog_update()
 		 * returns an error.
 		 */
+		if (old == new)
+			goto out;
+
 		err = proc_watchdog_update();
 	}
 out:
@@ -951,7 +954,7 @@ int proc_soft_watchdog(struct ctl_table *table, int write,
 int proc_watchdog_thresh(struct ctl_table *table, int write,
 			 void __user *buffer, size_t *lenp, loff_t *ppos)
 {
-	int err, old;
+	int err, old, new;
 
 	get_online_cpus();
 	mutex_lock(&watchdog_proc_mutex);
@@ -971,6 +974,10 @@ int proc_watchdog_thresh(struct ctl_table *table, int write,
 	/*
 	 * Update the sample period. Restore on failure.
 	 */
+	new = ACCESS_ONCE(watchdog_thresh);
+	if (old == new)
+		goto out;
+
 	set_sample_period();
 	err = proc_watchdog_update();
 	if (err) {
diff -uN a/1.txt b/1.txt
--- a/dummy/rpi_1366_5f4a82d5e3492c26fb0263ca7f007180612e8b54.txt	1970-01-01 00:00:00.000000000 +0000
+++ b/dummy/rpi_1366_5f4a82d5e3492c26fb0263ca7f007180612e8b54.txt	2013-12-23 04:07:40.000000000 +0000
@@ -0,0 +1 @@
+dummy file to ensure patch has content.
